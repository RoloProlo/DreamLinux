import tkinter as tk
from PIL import Image, ImageTk
from datetime import datetime
import sqlite3
from tkmacosx import Button


class CharacterScreen(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.clock_label = tk.Label(self, font=("Helvetica", 44, "bold"), bg="#1D2364", fg="white")
        self.controller = controller
        self.configure(background='#1D2364')

        self.canvas = tk.Canvas(self, bg="#1D2364", highlightthickness=0)
        self.canvas.pack(fill="both", expand=True)

        # Database connections and queries (simplified for demonstration)
        self.conn = sqlite3.connect('DreamImages.db')
        self.cursor = self.conn.cursor()
        self.cursor.execute("SELECT * FROM DreamImages LIMIT 1 OFFSET 0")
        self.dream_image_data = self.cursor.fetchone()

        if self.dream_image_data:
            character_names = self.dream_image_data[5].split(', ')  # Adjust index as necessary
            self.display(character_names)

        self.date = self.dream_image_data[1]
        self.setup_ui()

        # Connect to the SQLite database for character information
        self.conn_characters = sqlite3.connect('Characters.db')
        self.cursor_characters = self.conn_characters.cursor()

        self.cursor_characters.execute("SELECT name FROM Characters")
        self.characters = self.cursor_characters.fetchall()

    def setup_ui(self):
        self.clock_label.pack(pady=10, padx=10)
        self.update_clock()

        self.date = tk.Label(self, text=self.date, font=("Helvetica", 24, "bold"), bg="#1D2364", fg="white", relief="flat", anchor="n")

        # Define buttons
        seeAll_button = Button(self, text="See all characters", command=self.see_all, pady=10, bg='#8E97FF', fg='white', borderless=1)
        back_button = Button(self, text='Back to image', command=self.go_back(), bg='#414BB2', fg='white', pady=10, borderless=1)

        self.clock_label.place(relx=0.5, rely=0.05, anchor=tk.CENTER)
        self.date.place(relx=0.5, rely=0.12, anchor=tk.CENTER)
        seeAll_button.place(relx=0.65, rely=0.95, anchor=tk.CENTER)
        back_button.place(relx=0.5, rely=0.95, anchor=tk.CENTER)

    def display(self, characters):
        symbol = self.open_symbol()
        char_symbol = tk.Label(self.canvas, image=symbol, borderwidth=0)
        char_symbol.image = symbol  # Keep a reference to the image to prevent it from being garbage collected

        x_offset, y_offset = 30, 10
        for name in characters:
            char_image = self.canvas.create_image(x_offset, y_offset, anchor=tk.NW, image=symbol)
            char_name = self.canvas.create_text(x_offset + 80, y_offset + 170, text=name, font=("Helvetica", 24, "bold"), fill="white")

            self.canvas.tag_bind(char_image, '<Button-1>', lambda e, name=name: self.on_symbol_click(name))

            x_offset += 200
            if x_offset > 750:
                x_offset = 30
                y_offset += 200


    def open_symbol(self):
        image = Image.open("images/character_symbol.jpg").resize((160, 160), Image.Resampling.LANCZOS)
        return ImageTk.PhotoImage(image)

    def update_clock(self):
        self.clock_label.config(text=datetime.now().strftime("%H:%M"))
        self.clock_label.after(1000, self.update_clock)

    def on_symbol_click(self, name):
        print(f"Character clicked: {name}")
        # Handle character click event

    def see_all(self):
        self.names = []
        for name_tuple in self.characters:
            self.names.append(name_tuple[0])

        self.display(self.names)

    def go_back(self):
        self.controller.show_frame("HomeScreen")
        self.conn.close()
